# Generated by Django 5.1.1 on 2024-10-08 00:34

from django.db import migrations
from django.contrib.auth import get_user_model
from random import randint, choice
import datetime

def load_dummy_data(apps, schema_editor):
    User = get_user_model()
    ClassYear = apps.get_model('api', 'ClassYear')
    Quiz = apps.get_model('api', 'Quiz')
    Question = apps.get_model('api', 'Question')
    GameSession = apps.get_model('api', 'GameSession')
    QuizResult = apps.get_model('api', 'QuizResult')
    ProgressTracking = apps.get_model('api', 'ProgressTracking')

    # Fetch existing ClassYear instances created in a previous migration
    try:
        class_year_1 = ClassYear.objects.get(name='Year 1')
        class_year_2 = ClassYear.objects.get(name='Year 2')
        class_year_3 = ClassYear.objects.get(name='Year 3')
    except ClassYear.DoesNotExist:
        print("Required ClassYear instances not found.")
        return

    # Create teacher user
    teacher_user, created = User.objects.get_or_create(username='teacher_user', role='teacher', is_staff=True)
    teacher_user.set_password('Swinburne!')  # This will hash the password
    teacher_user.save()
    # Create student users and assign class_year directly upon creation
    student_1, created = User.objects.get_or_create(username='student1', password="Swinburne!", email='student1@dummyemail.com', role='student', is_staff=True, class_year_id=class_year_1.id)
    student_2, created = User.objects.get_or_create(username='student2', password="Swinburne!", email='student2@dummyemail.com', role='student', is_staff=True, class_year_id=class_year_2.id)
    student_3, created = User.objects.get_or_create(username='student3', password="Swinburne!", email='student3@dummyemail.com', role='student', is_staff=True, class_year_id=class_year_3.id)
    
    student_1.set_password('Swinburne!') 
    student_1.save()
    student_2.set_password('Swinburne!') 
    student_2.save()
    student_3.set_password('Swinburne!') 
    student_3.save()

    # debuggiong
    print("==========")
    print("Teacher User:", teacher_user, type(teacher_user)) 
    print(vars(teacher_user))
    print("==========")


    # Create quizzes for each class year
    quiz_year_1, created = Quiz.objects.get_or_create(
        teacher_id=teacher_user.id, title='Year 1 Quiz', description='Basic arithmetic quiz for Year 1', class_year=class_year_1
    )
    quiz_year_2, created = Quiz.objects.get_or_create(
        teacher_id=teacher_user.id, title='Year 2 Quiz', description='Intermediate quiz for Year 2', class_year=class_year_2
    )
    quiz_year_3, created = Quiz.objects.get_or_create(
        teacher_id=teacher_user.id, title='Year 3 Quiz', description='Advanced quiz for Year 3', class_year=class_year_3
    )

    # Add questions to each quiz
    Question.objects.bulk_create([
        Question(quiz=quiz_year_1, teacher_id=teacher_user.id, question_text='What is 1 + 1?', question_type='multiple_choice',
                 options={"A": "1", "B": "2", "C": "3", "D": "4"}, correct_answer={"B": "2"}, points=1),
        Question(quiz=quiz_year_2, teacher_id=teacher_user.id, question_text='What is 2 x 2?', question_type='multiple_choice',
                 options={"A": "2", "B": "3", "C": "4", "D": "5"}, correct_answer={"C": "4"}, points=2),
        Question(quiz=quiz_year_3, teacher_id=teacher_user.id, question_text='What is 5 x 3?', question_type='multiple_choice',
                 options={"A": "10", "B": "15", "C": "20", "D": "25"}, correct_answer={"B": "15"}, points=3),
        # Add more questions as needed
    ])

    # Create GameSessions and QuizResults for each student and quiz
    for student, quiz in [(student_1, quiz_year_1), (student_2, quiz_year_2), (student_3, quiz_year_3)]:
        for _ in range(3):
            status = choice(['in_progress', 'completed', 'abandoned'])
            duration = datetime.timedelta(minutes=randint(5, 20))
            correct_answers_count = randint(1, 5)
            score = correct_answers_count * 10

            game_session = GameSession.objects.create(
                student_id=student.id,
                quiz=quiz,
                duration=duration if status == 'completed' else None,
                status=status,
                score=score,
                correct_answers_count=correct_answers_count,
                date_played=datetime.datetime.now() - datetime.timedelta(days=randint(1, 30)),
                last_updated=datetime.datetime.now()
            )

            if status == 'completed':
                QuizResult.objects.create(
                    student_id=student.id,
                    quiz=quiz,
                    score=score,
                    feedback="Good job!" if score >= 30 else "Needs improvement",
                    completed_at=datetime.datetime.now() - datetime.timedelta(days=randint(1, 30)),
                    updated_at=datetime.datetime.now()
                )
        # Add dummy data for ProgressTracking
        ProgressTracking.objects.create(
            student_id=student.id,
            quiz=quiz,
            status=choice(['in_progress', 'completed']),
            score=score if status == 'completed' else None,
            started_at=datetime.datetime.now() - datetime.timedelta(days=randint(1, 30)),
            completed_at=datetime.datetime.now() if status == 'completed' else None
        )

def reverse_dummy_data(apps, schema_editor):
    User = get_user_model()
    Quiz = apps.get_model('api', 'Quiz')
    Question = apps.get_model('api', 'Question')
    GameSession = apps.get_model('api', 'GameSession')
    QuizResult = apps.get_model('api', 'QuizResult')

    # Delete all dummy data
    QuizResult.objects.all().delete()
    GameSession.objects.all().delete()
    Question.objects.all().delete()
    Quiz.objects.all().delete()
    User.objects.filter(username__in=['teacher_user', 'student1', 'student2', 'student3']).delete()

class Migration(migrations.Migration):

    dependencies = [
        ('api', '0005_question_teacher'),
    ]

    operations = [
        migrations.RunPython(load_dummy_data, reverse_dummy_data),
    ]
