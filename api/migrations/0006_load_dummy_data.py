# Generated by Django 5.1.1 on 2024-10-08 00:34

import json
from django.db import migrations
from django.contrib.auth import get_user_model
import datetime

def load_data(apps, schema_editor):
    # Load models
    
    Quiz = apps.get_model('api', 'Quiz')
    Question = apps.get_model('api', 'Question')
    GameSession = apps.get_model('api', 'GameSession')
    QuizResult = apps.get_model('api', 'QuizResult')
    ProgressTracking = apps.get_model('api', 'ProgressTracking')
    
    # Load JSON files
    with open('api/data/classyear_data.json') as f:
        class_year_data = json.load(f)
    with open('api/data/user_data.json') as f:
        user_data = json.load(f)
    with open('api/data/quiz_data.json') as f:
        quiz_data = json.load(f)
    with open('api/data/question_data.json') as f:
        question_data = json.load(f)
    with open('api/data/gamesession_data.json') as f:
        gamesession_data = json.load(f)
    with open('api/data/progresstracking_data.json') as f:
        progress_tracking_data = json.load(f)


  # Load data into User
    User = get_user_model()
    for entry in user_data:
        fields = entry['fields']
        user, created = User.objects.get_or_create(
            pk=entry['pk'],
            defaults={
                "username": fields['username'],
                "email": fields['email'],
                "role": fields['role'],
                "first_name": fields.get('first_name', ""),
                "last_name": fields.get('last_name', ""),
                "is_staff": True,
                "class_year_id": fields.get('class_year_id', None),
            },
        )
        # Set the password properly if the user was created
        if created:
            user.set_password('Swinburne!')  # Hash the password
            user.save()

    # Load data into Quiz
    for entry in quiz_data:
        fields = entry['fields']
        # teacher = get_user_model().objects.get(pk=fields['teacher_id'])
        # class_year_id = ClassYear.objects.get(pk=fields['class_year_id'])
        Quiz.objects.get_or_create(
            pk=entry['pk'],
            defaults={
                "teacher_id": fields['teacher_id'],
                "title": fields['title'],
                "description": fields['description'],
                "class_year_id": fields['class_year_id'],
                "created_at": fields['created_at'],
                "updated_at": fields['updated_at'],
            },
        )

    # Load data into Question
    for entry in question_data:
        fields = entry['fields']
        quiz = Quiz.objects.get(pk=fields['quiz'])
        Question.objects.get_or_create(
            pk=entry['pk'],
            defaults={
                "quiz": quiz,
                "teacher_id": fields['teacher_id'],
                "question_text": fields['question_text'],
                "question_type": fields['question_type'],
                "options": fields['options'],
                "correct_answer": fields['correct_answer'],
                "points": fields['points'],
                "created_at": fields['created_at'],
                "updated_at": fields['updated_at'],
            },
        )

  # Load data into GameSession and QuizResult if GameSession has completed
    for entry in gamesession_data:
        fields = entry['fields']
        quiz = Quiz.objects.get(pk=fields['quiz'])
        game_session, created = GameSession.objects.get_or_create(
            pk=entry['pk'],
            defaults={
                "student_id": fields['student_id'],
                "quiz": quiz,
                "duration": datetime.timedelta(minutes=fields['duration']),
                "status": fields['status'],
                "score": fields['score'],
                "correct_answers_count": fields['correct_answers_count'],
                "date_played": fields['date_played'],
                "last_updated": fields['last_updated'],
            },
        )
        print(game_session.status)
        if game_session.status ==  'completed':
            QuizResult.objects.get_or_create(
                pk=entry['pk'],
                defaults={
                    "student_id": fields['student_id'],
                    "quiz": quiz,
                    "score": fields['score'],
                    "feedback": "Good job!" if fields['score'] >= 30 else "Needs improvement",
                    "completed_at": fields['last_updated'],
                    "updated_at": fields['last_updated'],
                },
            )
        

def reverse_data(apps, schema_editor):
    ClassYear = apps.get_model('api', 'ClassYear')
    Quiz = apps.get_model('api', 'Quiz')
    Question = apps.get_model('api', 'Question')
    ProgressTracking = apps.get_model('api', 'ProgressTracking')
    User = get_user_model()

    # Delete all objects created during migration
    Question.objects.all().delete()
    Quiz.objects.all().delete()
     # Delete all users except the admin
    User.objects.exclude(username='quizora').delete()
    ClassYear.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0005_question_teacher'),
    ]

    operations = [
        migrations.RunPython(load_data, reverse_data),
    ]
